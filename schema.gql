# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BaseEntityWithUuid {
  id: ID!
  uuid: String!
}

type Customer {
  id: ID!
  uuid: String!
  name: String!
  address: String!
  city: String
  province: String
  postal: String
  phone: String!
  email: String
  orders: [Order!]!
  type: String!
  note: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Grade {
  id: ID!
  uuid: String!
  name: String!
  price: Float!
}

input GradeInput {
  name: String!
  price: Float!
}

type Item {
  id: ID!
  uuid: String!
  partId: Float!
  itemName: String!
  width: Float!
  height: Float!
  price: Float!
  handrailMaterial: Material!
  handrailType: String!
  handrailLength: Float!
  coverColor: String!
  roomName: String
}

input ItemInput {
  roomName: String
  width: Float
  height: Float
  handrailType: String
  handrailMaterial: String
  handrailLength: Float!
  coverColor: String!
}

enum Material {
  BASIC
  CRYSTAL
  METAL
  MOTOR
}

type Mutation {
  login(password: String!, staffId: String!): Staff
  logout: Boolean!
  registerStaff(data: RegisterInput!): Staff!
  registerCustomer(data: RegisterCustomerInput!): Customer!
  updateCustomer(data: UpdateCustomerInput!, id: Float!): Boolean!
  deleteCustomer(id: Float!): Boolean!
  registerGrade(data: GradeInput!): Grade!
  updateGrade(data: GradeInput!, gradeId: Float!): Boolean!
  registerPart(data: PartInput!): Part!
  updatePart(data: PartInput!, partId: Float!): Boolean!
  deletePart(id: Float!): Boolean!
  createItem(data: ItemInput!, partId: Float!, orderId: Float!): Item!
  updateItem(data: ItemInput!, partId: Float!, itemId: Float!): Boolean!
  deleteItem(itemId: Float!): Boolean!
  placeOrder(data: PlaceOrderInput!): Order!
  updateOrder(data: PlaceOrderInput!, installDate: DateTime!, orderId: Float!): Boolean!
  deleteOrder(id: Float!): Boolean!
}

type Order {
  id: ID!
  uuid: String!
  orderNo: String!
  hst: Boolean!
  deposit: Float!
  discount: Float!
  installation: Float!
  installationDiscount: Float!
  total: Float
  items: [Item!]
  status: Status!
  payment: String!
  orderDate: DateTime!
  installDate: DateTime
  customer: Customer!
  invoiceDate: DateTime
  invAddress: String
  invCity: String
  invProvince: String
  invPostal: String
}

type Part {
  id: ID!
  uuid: String!
  type: PartType!
  kind: PartKind!
  name: String!
  color: String!
  manufacturer: String!
  grade: String!
  modelNo: String
  stocks: Float!
}

input PartInput {
  type: PartType!
  kind: PartKind!
  name: String
  color: String
  manufacturer: String
  grade: String
  modelNo: String
  stocks: Float = 0
}

enum PartKind {
  COMBI
  ROLL
  TRIPLE
}

enum PartType {
  FABRIC
  COMPONENT
}

input PlaceOrderInput {
  customerId: Float!
  orderNo: String!
  hst: Boolean
  invAddress: String
  invCity: String
  invProvince: String
  invPostal: String
  deposit: Float
  discount: Float
  installation: Float = 0
  installationDiscount: Float = 0
  status: String
  payment: String
  invoiceDate: DateTime
}

type Query {
  getCustomers: [Customer!]!
  getCustomer(id: Float!): Customer!
  getGrades: [Grade!]!
  getParts(keyword: String!, type: String!): [Part!]!
  getOrder(orderNo: String!): Order
  getOrders: [Order!]!
}

input RegisterCustomerInput {
  name: String!
  address: String!
  city: String
  province: String
  postal: String
  phone: String!
  email: String
  note: String
}

input RegisterInput {
  staffId: String!
  password: String!
}

type Staff {
  id: ID!
  uuid: String!
  staffId: String!
  password: String!
}

enum Status {
  MEASURE
  MANUFACTURE
  INSTALL
  RAMAINING
  COMPLETE
}

input UpdateCustomerInput {
  name: String
  address: String
  city: String
  province: String
  postal: String
  phone: String
  email: String
  note: String
}
